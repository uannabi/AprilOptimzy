{"id":137129,"url":"http://en.wikipedia.org/wiki/Symmetric-key_algorithm","text":"Symmetric-key algorithms is a method in cryptography. It is when the keys for decryption and encryption are exactly the same shared secret. You can generate the secret randomly, or from a password, or through a secret key-exchange procedure like Diffie-Hellman.\nSymmetric-key algorithms are very important because they are faster on computers than the other kind:public-key algorithms. In public-key cryptography (asymmetric-key cryptography) the key for encryption can be given to the public with no problem, and everyone can send you secret messages. The key for encryption is \"open\" because, in practice, it cannot be used to get the key for decryption. This is very useful, but public-key cryptography algorithms are very slow on computers, so they are only used to send a secret key. Then symmetric-key algorithms are used for everything else because they are faster.\nThere are two kinds of symmetric-key algorithms, called stream ciphers and block ciphers. Stream ciphers encrypt a message as a stream of bits one at a time. Block ciphers take blocks of bits, encrypt them as a single unit, and sometimes use the answer later too. Blocks of 64 bits have been commonly used; though modern ciphers like the Advanced Encryption Standard use 128-bit blocks.\nExamples of popular symmetric cyphers include Twofish, Serpent, AES (aka Rijndael), Blowfish, CAST5, RC4, TDES, and IDEA.\nIn history, some cryptanalysis methods exploited symmetry, so symmetric systems were less secure. Some attacks are called known-plaintext attacks, chosen plaintext attacks, differential cryptanalysis and linear cryptanalysis.\nOther terms for symmetric-key encryption are secret-key, single-key, shared-key, one-key and eventually private-key encryption. This last term does not have the same meaning that the term \"private key\" has in public-key cryptography.\nSpeed.\nSymmetric-key algorithms are generally much less \"computationally intensive\" than asymmetric key algorithms. In practice, asymmetric key algorithms are typically hundreds to thousands times slower than symmetric key algorithms.\nKey management.\nOne disadvantage of symmetric-key algorithms is the requirement of a \"shared secret key\", with both parties holding the same copy at each end.\nIn order to ensure secure communications between everyone in a group of n people a total of \"n\"(\"n\" - 1)/2 keys are needed, which is the total number of possible communication channels.\nTo limit the impact of a potential discovery by a cryptographic attacker, they should be changed regularly and kept secure during distribution and in service. The process of selecting, distributing and storing keys is known as key management, and is difficult to achieve reliably and securely.\nHybrid cryptosystem.\nIn modern cryptosystems designs, both asymmetric (public key) and symmetric algorithms are used to take advantage of the best of both.\nAsymmetric algorithms are used to distribute symmetric-keys at the start of a session. Once a symmetric key is known to all parties of the session, faster symmetric-key algorithms using that key can be used to encrypt the remainder of the session. This simplifies the key distribution problem, because asymmetric keys only have to be distributed authentically, while symmetric keys need to be distributed in both an authentic and confidential manner.\nSystems that use such a hybrid approach include SSL, PGP and GPG, etc.","categories":[],"infobox_types":[],"annotations":[{"uri":"Cryptography","surface_form":"cryptography","offset":40},{"uri":"Key_(cryptography)","surface_form":"key","offset":69},{"uri":"Decryption","surface_form":"decryption","offset":78},{"uri":"Encryption","surface_form":"encryption","offset":93},{"uri":"Shared_secret","surface_form":"shared secret","offset":125},{"uri":"Password","surface_form":"password","offset":188},{"uri":"Diffie-Hellman_key_exchange","surface_form":"Diffie-Hellman","offset":246},{"uri":"Algorithm","surface_form":"algorithm","offset":276},{"uri":"Public-key_cryptography","surface_form":"public-key cryptography","offset":389},{"uri":"Stream_cipher","surface_form":"stream cipher","offset":929},{"uri":"Block_cipher","surface_form":"block cipher","offset":948},{"uri":"Cipher","surface_form":"cipher","offset":1194},{"uri":"Advanced_Encryption_Standard","surface_form":"Advanced Encryption Standard","offset":1211},{"uri":"Cypher","surface_form":"cypher","offset":1290},{"uri":"Twofish","surface_form":"Twofish","offset":1306},{"uri":"Serpent_(cipher)","surface_form":"Serpent","offset":1315},{"uri":"Advanced_Encryption_Standard","surface_form":"AES","offset":1324},{"uri":"Aka","surface_form":"aka","offset":1329},{"uri":"Blowfish_(cipher)","surface_form":"Blowfish","offset":1344},{"uri":"CAST5","surface_form":"CAST5","offset":1354},{"uri":"RC4","surface_form":"RC4","offset":1361},{"uri":"Triple_DES","surface_form":"TDES","offset":1366},{"uri":"International_Data_Encryption_Algorithm","surface_form":"IDEA","offset":1376},{"uri":"Cryptanalysis","surface_form":"cryptanalysis","offset":1399},{"uri":"Symmetry","surface_form":"symmetry","offset":1431},{"uri":"Known-plaintext_attack","surface_form":"known-plaintext attack","offset":1504},{"uri":"Chosen-plaintext_attack","surface_form":"chosen plaintext attack","offset":1529},{"uri":"Differential_cryptanalysis","surface_form":"differential cryptanalysis","offset":1555},{"uri":"Linear_cryptanalysis","surface_form":"linear cryptanalysis","offset":1586},{"uri":"Public-key_cryptography","surface_form":"public-key cryptography","offset":1817},{"uri":"Computer_security","surface_form":"secure","offset":2538},{"uri":"Key_management","surface_form":"key management","offset":2649},{"uri":"Cryptosystem","surface_form":"cryptosystem","offset":2747},{"uri":"Public-key_cryptography","surface_form":"public key","offset":2787},{"uri":"Session_(computer_science)","surface_form":"session","offset":3011},{"uri":"Authentication","surface_form":"authentically","offset":3218},{"uri":"Secure_Sockets_Layer","surface_form":"SSL","offset":3371},{"uri":"Pretty_Good_Privacy","surface_form":"PGP","offset":3376},{"uri":"GNU_Privacy_Guard","surface_form":"GPG","offset":3384}]}