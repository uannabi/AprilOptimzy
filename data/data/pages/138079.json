{"id":138079,"url":"http://en.wikipedia.org/wiki/Space-time_tradeoff","text":"In computer science, a space-time or time-memory tradeoff is a way of solving a problem or calculation in less time by using more storage space (or memory), or by solving a problem in very little space by spending a long time. Most computers have a large amount of space, but not infinite space. Also, most people are willing to wait a little while for a big calculation, but not forever. So if your problem is taking a long time but not much memory, a space-time tradeoff would let you use more memory and solve the problem more quickly. Or, if it could be solved very quickly but requires more memory than you have, you can try to spend more time solving the problem in the limited memory.\nThe most common condition is an algorithm using a lookup table. This means that the answers for some question for every possible value can be written down. One way of solving this problem is to write down the entire lookup table, which will let you find answers very quickly, but will use a lot of space. Another way is to calculate the answers without writing down anything, which uses very little space, but might take a long time.\nA space-time tradeoff can be used with the problem of data storage. If data is stored uncompressed, it takes more space but less time than if the data were stored compressed (since compressing the data decreases the amount of space it takes, but it takes time to run the compression algorithm).\nLarger code size can be used to increase program speed when using loop unwinding. This technique makes the program code longer for each iteration of a loop, but saves the computation time needed for jumping back to the beginning of the loop at the end of each iteration.\nIn the field of cryptography, using space-time tradeoff, the attacker is decreasing the exponential time required for a brute force attack. Rainbow tables use partially precomputed values in the hash space of a cryptographic hash function to crack passwords in minutes instead of weeks. Decreasing the size of the rainbow table increases the time required to iterate over the hash space. The meet-in-the-middle attack attack uses a space-time tradeoff to find the cryptographic key in only formula_1 encryptions (and formula_1 space) compared to the expected formula_1 encryptions (but only formula_1 space) of the normal attack.\nDynamic programming is another example where the time of solving problems can be decreased by using more memory.","categories":[],"infobox_types":[],"annotations":[{"uri":"Computer_science","surface_form":"computer science","offset":3},{"uri":"Algorithm","surface_form":"algorithm","offset":724},{"uri":"Lookup_table","surface_form":"lookup table","offset":742},{"uri":"Data_storage_device","surface_form":"data storage","offset":1180},{"uri":"Data_compression","surface_form":"compression","offset":1397},{"uri":"Algorithm","surface_form":"algorithm","offset":1409},{"uri":"Loop_unrolling","surface_form":"loop unwinding","offset":1487},{"uri":"Technique","surface_form":"technique","offset":1508},{"uri":"Computer_program","surface_form":"program code","offset":1528},{"uri":"Cryptography","surface_form":"cryptography","offset":1708},{"uri":"Exponential_function","surface_form":"exponential","offset":1780},{"uri":"Brute_force_attack","surface_form":"brute force attack","offset":1812},{"uri":"Rainbow_table","surface_form":"Rainbow tables","offset":1832},{"uri":"Cryptographic_hash_function","surface_form":"cryptographic hash function","offset":1903},{"uri":"Cryptanalysis","surface_form":"crack","offset":1934},{"uri":"Password","surface_form":"password","offset":1940},{"uri":"Iteration","surface_form":"iterate","offset":2051},{"uri":"Meet-in-the-middle_attack","surface_form":"meet-in-the-middle attack","offset":2084},{"uri":"Key_(cryptography)","surface_form":"cryptographic key","offset":2156},{"uri":"Dynamic_programming","surface_form":"Dynamic programming","offset":2322}]}