{"id":138720,"url":"http://en.wikipedia.org/wiki/Complex_instruction_set_computer","text":"A complex instruction set computer (acronym CISC pronounced \"sisk\"), represents a CPU design method in which each instruction can execute several low-level operations, such as a load from memory, an arithmetic operation, and a memory store, all in a single instruction. The term is used in contrast to reduced instruction set computer (RISC).\nThe terms RISC and CISC have become less meaningful with the continued improvements of both CISC and RISC designs and implementations. The first highly pipelined \"CISC\" implementations, such as Intel 80486 series, supports every instruction that their predecessors did, but achieved \"high efficiency\" only on a few simple x86 subset (similar to a RISC instruction set, but without the \"load-store\" limitations of RISC). Modern x86 processors also decode and split more complex instructions into a series of smaller internal \"Micro-operations\" which can thereby be executed in a pipelined (parallel) fashion, thus achieving high performance on a much larger subset of instructions.\nExamples of CISC processors are the 360 (excluding the 'scientific' Model 44), VAX, PDP-11, Motorola 68000 family, and Intel x86 architecture based processors.","categories":[],"infobox_types":[],"annotations":[{"uri":"Acronym","surface_form":"acronym","offset":36},{"uri":"Pronoun","surface_form":"pronoun","offset":49},{"uri":"CPU_design","surface_form":"CPU design","offset":82},{"uri":"Instruction_(computer_science)","surface_form":"instruction","offset":114},{"uri":"Computer_memory","surface_form":"memory","offset":188},{"uri":"Arithmetic","surface_form":"arithmetic","offset":199},{"uri":"Computer_memory","surface_form":"memory store","offset":227},{"uri":"Reduced_instruction_set_computer","surface_form":"reduced instruction set computer","offset":302},{"uri":"Instruction_pipelining","surface_form":"pipelined","offset":495},{"uri":"Intel_80486","surface_form":"Intel 80486","offset":537},{"uri":"Load-store_architecture","surface_form":"load-store","offset":729},{"uri":"Micro-operation","surface_form":"Micro-operation","offset":868},{"uri":"360","surface_form":"360","offset":1060},{"uri":"VAX","surface_form":"VAX","offset":1103},{"uri":"PDP-11","surface_form":"PDP-11","offset":1108},{"uri":"Motorola_68000","surface_form":"Motorola 68000","offset":1116},{"uri":"Intel","surface_form":"Intel","offset":1143},{"uri":"X86","surface_form":"x86","offset":1149}]}