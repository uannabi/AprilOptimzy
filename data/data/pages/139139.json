{"id":139139,"url":"http://en.wikipedia.org/wiki/Instruction_level_parallelism","text":"1. e = a + b\n2. f = c + d\n3. g = e * f\nOperation 3 depends on the results of \"e\" and \"f\" which are calculated from operations 1 and 2, so \"g\" cannot be calculated until both of \"e\" and \"f\" are computed. However, operations 1 and 2 do not depend on any other operation, so they can be computed simultaneously. If we assume that each operation can be completed in one unit of time then these three instructions can be completed in a total of two units of time, giving an ILP factor of 3/2; which means 3/2 = 1.5 greater than without ILP.\nOne of the goals of compilers and processors designers is to use as much ILP as possible. Ordinary programs are written execute instructions in sequence; one after the other, in the order as written by programmers. ILP allows the compiler and the processor to overlap the execution of multiple instructions or even to change the order in which instructions are executed.\nHow much ILP exists in programs depends on the application type, for example, in graphics and scientific applications the amount can be very large while in cryptography the amount much less.\nIn recent years, ILP techniques have been used for performance improvements in conditions where the difference between processor operating frequencies and memory access times is large. As of 2008, a cache \"miss\" costs several hundreds of CPU cycles in a main memory access; with much longer latency compared when the processor finds that the memory location is in the cache. Hence, this technique was proved to be insufficient to save the CPU time from waiting for the off-chip data. Instead, the industry is moving towards improving higher levels of parallelism using techniques such as multiprocessing and multithreading.","categories":[],"infobox_types":[],"annotations":[{"uri":"Computation","surface_form":"computed","offset":193},{"uri":"Computation","surface_form":"computed","offset":284},{"uri":"Compiler","surface_form":"compiler","offset":556},{"uri":"Central_processing_unit","surface_form":"processors","offset":570},{"uri":"Design","surface_form":"design","offset":581},{"uri":"Execution_(computing)","surface_form":"execute","offset":656},{"uri":"Instruction_(computer_science)","surface_form":"instructions","offset":664},{"uri":"Computer_program","surface_form":"programmers","offset":738},{"uri":"Cryptography","surface_form":"cryptography","offset":1063},{"uri":"2008","surface_form":"2008","offset":1289},{"uri":"CPU_cache","surface_form":"cache","offset":1297},{"uri":"Technique","surface_form":"technique","offset":1485},{"uri":"Integrated_circuit","surface_form":"chip","offset":1571},{"uri":"Technique","surface_form":"technique","offset":1667},{"uri":"Multiprocessing","surface_form":"multiprocessing","offset":1686},{"uri":"Multithreading","surface_form":"multithreading","offset":1706}]}