{"id":139330,"url":"http://en.wikipedia.org/wiki/Superscalar","text":"A superscalar CPU design makes a form of parallel computing called Instruction-level parallelism inside a single CPU, which allows more work to be done at the same clock rate. This means the CPU executes more than one instruction during a clock cycle by running multiple instructions at the same time (called instruction dispatching) on duplicate functional units. Each functional unit is just an execution resource inside the CPU core, like an arithmetic logic unit (ALU), floating point unit (FPU), a bit shifter, or a multiplier.\nMost superscalar CPUs are also pipelined, but it's possible to have a non-pipelined superscalar CPU or a pipelined non-superscalar CPU.\nIn a superscalar CPU an instruction dispatcher reads instructions from memory and decides which ones can be run in parallel, dispatching them on the multiple duplicate functional units available inside the CPU.\nSuperscalar CPU design is concerned with improving accuracy of the instruction dispatcher, and allowing it to keep the multiple functional units busy at all times. As of 2008, all general-purpose CPUs are superscalar, a typical superscalar CPU may include up to 4 ALUs, 2 FPUs, and two SIMD units. If the dispatcher can't keep all of the units busy, the performance of the CPU will be lower.\nLimitations.\nEven given infinitely fast dependency checking inside a normal superscalar CPU, if the instruction list itself has many dependencies, this would also limit the possible performance improvement, so the amount of built-in parallelism in the code is another limitation.\nNo matter how fast the dispatcher speed, there is a practical limit on how many instructions can be simultaneously dispatched. While hardware advances will allow for more functional units (e.g., ALUs) per CPU core, the problem of checking instruction dependencies increases to a limit that the achievable superscalar dispatching limit is somewhat small. -- Likely on the order of five to six simultaneously dispatched instructions.\nAlternatives.\nThe various alternative techniques are not mutually exclusive\u2014they can be (and frequently are) combined in a single processor, so it is possible to design a multicore CPU is where each core is an independent processor with multiple parallel superscalar pipelines. Some multicore processors also include vector capability.","categories":[],"infobox_types":[],"annotations":[{"uri":"Central_processing_unit","surface_form":"CPU","offset":14},{"uri":"Parallel_computing","surface_form":"parallel computing","offset":41},{"uri":"Instruction_level_parallelism","surface_form":"Instruction-level parallelism","offset":67},{"uri":"Clock_rate","surface_form":"clock rate","offset":164},{"uri":"Instruction_(computer_science)","surface_form":"instruction","offset":218},{"uri":"Execution_unit","surface_form":"execution resource","offset":397},{"uri":"Arithmetic_logic_unit","surface_form":"arithmetic logic unit","offset":445},{"uri":"Floating_point_unit","surface_form":"floating point unit","offset":474},{"uri":"Multiplication_ALU","surface_form":"multiplier","offset":521},{"uri":"Instruction_pipelining","surface_form":"pipelined","offset":564},{"uri":"Design","surface_form":"design","offset":896},{"uri":"SIMD","surface_form":"SIMD","offset":1166},{"uri":"Infinite","surface_form":"infinite","offset":1296},{"uri":"Computer_hardware","surface_form":"hardware","offset":1685},{"uri":"Instruction_pipelining","surface_form":"pipelines","offset":2251},{"uri":"Vector_processor","surface_form":"vector","offset":2301}]}