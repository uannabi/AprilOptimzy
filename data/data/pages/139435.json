{"id":139435,"url":"http://en.wikipedia.org/wiki/Out-of-order_execution","text":"In computer engineering, out-of-order execution, OoOE, is a technique used in most high-performance microprocessors to make use of cycles that would otherwise be wasted by a certain type of costly delay. Most modern CPU designs include support for out of order execution.\nThe key concept of OoO processing is to allow the processor to avoid a class of delays (termed: \"stalls \") that occur when the data needed to perform an operation are unavailable.\nOoO processors fill these \"slots\" in time with other instructions that are ready, then re-order the results at the end to make it appear that the instructions were processed as normal. The way the instructions are ordered in the original computer code is known as program order, in the processor they are handled in data order (the order in which the data, operands, become available in the processor's registers). Fairly complex circuitry is needed to convert from one ordering to the other and maintain a logical ordering of the output; the processor itself appears to be running the instructions in random order.\nThe benefit of OoO processing grows as the instruction pipeline expands and the speed difference between main memory (or cache memory) and the processor increases. On modern machines, the processor runs many times faster than the memory, so during the time an in-order processor spends waiting for data to arrive, it could have processed a large number of instructions.\nIn the examples outlined above, the OoO processor avoids the stall that occurs in step (2) of the in-order processor when the instruction is not completely ready to be processed due to missing data.","categories":[],"infobox_types":[],"annotations":[{"uri":"Computer_engineering","surface_form":"computer engineering","offset":3},{"uri":"Technique","surface_form":"technique","offset":60},{"uri":"Microprocessor","surface_form":"microprocessor","offset":100},{"uri":"Instruction_cycle","surface_form":"cycles","offset":131},{"uri":"Terminology","surface_form":"termed","offset":360},{"uri":"Instruction_pipelining","surface_form":"instruction pipeline","offset":1111},{"uri":"RAM","surface_form":"main memory","offset":1173},{"uri":"Cache_memory","surface_form":"cache memory","offset":1189}]}