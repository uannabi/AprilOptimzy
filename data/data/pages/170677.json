{"id":170677,"url":"http://en.wikipedia.org/wiki/Algorithm","text":"ce=\"preserve\">An algorithm is a step procedure to solve logical and mathematical problems.\nA recipe is a good example of an algorithm because it says what must be done, step by step. It takes inputs (ingredients) and produces an output (the completed dish).\nThe words 'algorithm' and 'algorism' come from the name of a Persian mathematician called Al-Khw\u0101rizm\u012B (Persian: \u062E\u0648\u0627\u0631\u0632\u0645\u06CC, <abbr>c.</abbr> 780\u2013850).\nInformally, an algorithm can be called a \"list of steps\". Algorithms can be written in ordinary language, and that may be all a person needs.\nIn computing, an algorithm is a precise list of operations that could be done by a Turing machine.\nFor the purpose of computing, algorithms are written in pseudocode, flow charts, or programming languages.\nComparing algorithms.\nThere is usually more than one way to solve a problem. There may be many different recipes to make a certain dish which looks different but ends up tasting the same when all is said and done. The same is true for algorithms. However, some of these ways will be better than others. If a recipe needs lots of complicated ingredients that you do not have, it is not as a good as a simple recipe. When we look at algorithms as a way of solving problems, often we want to know how long it would take a computer to solve the problem using a particular algorithm. When we write algorithms, we like our algorithm to take the least amount of time so that we can solve our problem as quickly as possible.\nIn cooking, some recipes are more difficult to do than others, because they take more time to finish or have more things to keep track of.\nIt is the same for algorithms, and algorithms are better when they are easier for the computer to do. The thing that measures the difficulty of an algorithm is called \"complexity\". When we ask how complex an algorithm is, often we want to know how long it will take a computer to solve the problem we want it to solve.\nSorting by numbers.\nThese are examples of algorithms for sorting a stack of cards with many different numbers, so that the numbers are in order.\nPlayers start with a stack of cards that have not been sorted.\nFirst algorithm.\nThis algorithm goes through the stack of cards, one card at a time. This card is compared to the next card in the stack. Please note that this position only changes in step 6. This algorithm is called bubble sort. It is slow.\nStep-by-step example.\nLet us take a stack of the cards with the numbers \"5 1 4 2 8\", and sort it from smallest number to biggest one using this algorithm. In each step, the algorithm compares the elements written in bold. The top of the stack of cards is on the left-hand side.\n(5 1 4 2 8) formula_1 (1 5 4 2 8) Here, the algorithm compares the first two elements, and swaps them.\n(1 4 2 5 8) formula_1 (1 4 2 5 8) These elements are already in order, so the algorithm does not swap them.\nNow, the stack of cards is already sorted, but our algorithm does not know this. The algorithm needs one whole pass without any swap to know it is sorted.\nFinally, the array is sorted, and the algorithm can stop.\nHistory.\nThis is an easy-to-understand algorithm for sorting. Computer scientists called it \"Bubble sort\", because smaller elements will rise to the top, changing their position in each run. Unfortunately, the algorithm is not very good, because it needs a long time (many passes through the stack of cards) to sort it.\nSecond algorithm.\nThis algorithm uses another idea. Sometimes solving a problem is difficult, but the problem can be changed so it is made of simpler problems that are easier to solve. This is called recursion. It is more difficult to understand than the first example, but it will give a better algorithm.\nMerging two stacks together.\nThis works with two stacks of cards. One of them is called A, the other is called B. There is a third stack that is empty at the start, called C. At the end, it will contain the result.\nHistory.\nJohn von Neumann developed this algorithm in 1945. He did not call it \"Sorting by numbers\", he called it \"Mergesort\". It is a very good algorithm for sorting, compared to others.\nThird algorithm.\nThe first algorithm takes much longer to sort the cards than the second, but it can be improved (made better). Looking at bubble sort, it can be noticed that cards with high numbers move from the top of the stack quite quickly, but cards with low numbers at the bottom of the stack take a long time to \"rise\" (move to the top).\nHistory.\nThis algorithm was developed by C. A. R. Hoare in 1960. It is one of most widely used algorithms for sorting today. It is called \"Quicksort\".\nPutting algorithms together.\nIf players have cards with colors and numbers on them, they can sort them by color and number if they do the \"sorting by colors\" algorithm, then do the \"sorting by numbers\" algorithm to each colored stack, then put the stacks together.\nThe sorting-by-numbers algorithms are more difficult to do than the sorting-by-colors algorithm, because they may have to do the steps again many times. One would say that sorting by numbers is more \"complex\".","categories":[],"infobox_types":[],"annotations":[{"uri":"Recipe","surface_form":"recipe","offset":93},{"uri":"Al-Khw%C4%81rizm%C4%AB","surface_form":"Al-Khw\u0101rizm\u012B","offset":348},{"uri":"Persian_language","surface_form":"Persian","offset":362},{"uri":"Language","surface_form":"language","offset":502},{"uri":"Turing_machine","surface_form":"Turing machine","offset":631},{"uri":"Pseudocode","surface_form":"pseudocode","offset":703},{"uri":"Flow_chart","surface_form":"flow charts","offset":715},{"uri":"Programming_language","surface_form":"programming languages","offset":731},{"uri":"Number","surface_form":"number","offset":2031},{"uri":"Bubble_sort","surface_form":"bubble sort","offset":2355},{"uri":"Recursion","surface_form":"recursion","offset":3602},{"uri":"John_von_Neumann","surface_form":"John von Neumann","offset":3933},{"uri":"C._A._R._Hoare","surface_form":"C. A. R. Hoare","offset":4498}]}