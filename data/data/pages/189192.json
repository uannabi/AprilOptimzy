{"id":189192,"url":"http://en.wikipedia.org/wiki/Floating_point","text":"e=\"preserve\">Real numbers in binary have to be stored in a special way in a computer. Computers represent numbers as binary integers (whole numbers that are powers of two), so there is no direct way for them to represent non-integer numbers like decimals as there is no radix point. One way computers bypass this problem is floating-point representation, with \"floating\" referring to how the radix point can move higher or lower when multiplied by an exponent (power).\nOverview.\nIn mathematics and science, very large and very small numbers are often made simpler and multiplied to a power of ten to make them easier to understand. For example, it can be much easier to read 1.2 trillion as formula_1 than 1,200,000,000,000. This can also be used with negative powers of ten to make small numbers, meaning you can represent 0.000001 as formula_1. This process is called scientific notation.\nSince computers are limited to integers and binary, this means they cannot easily represent fractional decimal numbers. In order to represent fractional numbers, computers use three sets of binary numbers to make a scientific notation representation. They are: the signed bit, which determines if the number is positive (0) or negative (1); the significand, which is an integer (whole) version of the number; and the exponent, which is the power you multiply the base by.\nSignificand.\nThe significand is found by taking your number and moving the radix point until there is no fractional part, making it into an integer. In decimal this is making 1.45 into 145 by moving the point right 2 steps, and in binary this would be making 1101.0111 (13.4375) into 1101 0111 (215) by moving the point right 4 steps; in both cases these numbers aren't related to one another outside using the same digits in a similar ordering.\nSimilarly to how scientific notation makes the significand as basic as possible, the aim in floating point numbers is to make it an integer so it can be represented in bytes and used in calculations.\nExponent.\nThe exponent is the number of digits the radix point has moved past: if it moves left then the exponent is negative, but if it moves right then it is positive. As above, making 1.45 into 145 requires you to multiply by 100, so the exponent is 2 as formula_1. Equally, turning 1101.0111 (13.4375) into 1101 0111 (215) requires you to move the radix point four columns to the right, so the exponent is 4; this can be verified in decimal as formula_1.\nformula_1\nformula_1\nformula_1\nDecimal to Bicimal.\nformula_1\nformula_1\nformula_1\nformula_1\nformula_1\nformula_1","categories":[],"infobox_types":[],"annotations":[{"uri":"Real_number","surface_form":"Real number","offset":13},{"uri":"Binary","surface_form":"binary","offset":29},{"uri":"Computer","surface_form":"computer","offset":76},{"uri":"Integers","surface_form":"integers","offset":124},{"uri":"Radix_point","surface_form":"radix point","offset":270},{"uri":"Exponentiation","surface_form":"exponent (power)","offset":451},{"uri":"Mathematics","surface_form":"mathematics","offset":482},{"uri":"Science","surface_form":"science","offset":498},{"uri":"Scientific_notation","surface_form":"scientific notation","offset":870},{"uri":"Bytes","surface_form":"bytes","offset":1977}]}