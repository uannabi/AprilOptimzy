{"id":229910,"url":"http://en.wikipedia.org/wiki/Opcode","text":"An opcode identifies which basic computer operation in the instruction set is to be performed. It is used when writing machine code. It tells the computer to do something. Each machine language instruction typically has both an opcode and operands. The opcode is like a verb in a sentence, and the operands are like the subject in a sentence.\nOperands are typically memory or registry addresses.\nOpcodes are used in machine code for a number of functions, including Float Addition of registers, Two's compliment addition of registers, Shifting register values to memory, or to a hard drive, stopping a program, etc. There are quite literally hundreds of common opcodes employed in modern computers.\nDue to the nature of a computer's architecture, opcodes take the form of binary numbers. Alternatively, opcodes can be represented by hexadecimal digits, (for example, 10100101 = A5) for ease of reading and coding when designing or emulating a machine-code program. These values are then transformed into their binary equivalents to be saved. Modern opcodes are at least two hex characters in length which take up 1 byte of storage space.\nOpcodes will vary in capability and 'value' depending on the computer to which they belong, as they are hardware dependent. For instance, the opcode for STORE as expressed in Hex could be FA for one machine and 02 for another. Some opcodes will not be available on some computers. In general, there are two approaches toward building instruction sets. A reduced instruction set computer (RISC) offers less possible opcodes in favor of increasing speed for simple processes. Complex instruction set Computing (CISC) offers more opcodes in favor of increasing speed for complex processes.\nOpcodes are seldom used by programmers directly. Whenever they are directly programmed into memory, they are only ever guaranteed to work on the computer they were designed for. When programmers write in assembly language, a translator program converts program statements, one-for-one, into machine language commands. The programmer must only remember a mnemonic for each opcode instead of its binary value. Alternatively, a high level-programming language can be used, say 4th generation, which gets converted to 3rd generation and so on until it reaches 1st generation. From here, an individual computer will convert the program to machine code whenever the program file is read. This way, a program can work on a much larger variety of computers.","categories":[],"infobox_types":[],"annotations":[{"uri":"Instruction_set","surface_form":"instruction set","offset":59},{"uri":"Machine_code","surface_form":"machine code","offset":119},{"uri":"Reduced_instruction_set_computer","surface_form":"reduced instruction set computer","offset":1492},{"uri":"Assembly_language","surface_form":"assembly language","offset":1929},{"uri":"Mnemonic","surface_form":"mnemonic","offset":2079}]}