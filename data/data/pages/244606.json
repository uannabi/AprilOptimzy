{"id":244606,"url":"http://en.wikipedia.org/wiki/NP-complete","text":"An NP problem is an algorithmic problem such that if you have a case of the problem of size formula_1, the number of steps needed to check the answer is smaller than the value of some polynomial in formula_1. It doesn't mean one can find an answer in the polynomial number of steps, only check it.\nAn NP-complete problem is an NP problem such that if one could find answers to that problem in polynomial number of steps, one could also find answers to all NP problems in polynomial number of steps. This makes NP-complete decision problems the hardest problems in NP (they are NP-hard). People spent lots of time looking for algorithms that finds answers to some NP-complete problem in polynomial number of steps, but have not found any. Because of this, if someone shows a problem to be NP-complete, it is not likely that there is an algorithm solving it in polynomial number of steps.\nThe unsolved problem P = NP asks whether polynomial time algorithms actually exist for NP-complete, and by corollary, all NP problems. It is widely believed that this is not the case.\nThe Travelling salesman problem is an NP-Complete problem.","categories":[],"infobox_types":[],"annotations":[{"uri":"Algorithm","surface_form":"algorithm","offset":20},{"uri":"Polynomial","surface_form":"polynomial","offset":184},{"uri":"NP-hardness","surface_form":"NP-hard","offset":577},{"uri":"P_versus_NP","surface_form":"P = NP","offset":908},{"uri":"Travelling_salesman_problem","surface_form":"Travelling salesman problem","offset":1075}]}