{"id":305331,"url":"http://en.wikipedia.org/wiki/Division_by_two","text":"e=\"preserve\">In mathematics, division by two is when a number is divided by two. Some cultures, like the ancient Egyptians, thought this was a different operation than division. Some mathematicians up until the 16th century (1500-1599) thought this too. Today division by two is handled specially in modern computer programming.\nDivision by two is also called halving, mediation, and dimidiation.\nBinary.\nIn a binary number system, there are only two digits: 0 and 1. All other numbers are represented with those two digits. For example, \"one\" is 1, \"two\" is 10, \"three\" is 11, \"four\" is 100, and so on. Most of the time people use a number system with ten digits (the numbers 0 through 9.) This is called the decimal number system.\nDivision by two in binary is very easy. It is done by dropping the last digit on the right of the number. This is called a \"bit shift operation.\" For example, if we performed a bit shift operation on the binary number 100, we'd get 10. Since binary 100 is decimal 4, and binary 10 is decimal 2, this makes sense.\nAnother example is performing a bit shift operation on 1101. This would leave us with 110, but we dropped a 1 from the end, not a zero. This also makes sense because 1101 in binary is 13 in decimal. If we divide 13 by 2, we get 6 with a remainder of 1 (we have 1 left over.)\nComputers.\nComputers use the binary number system to store information. Information is broken up into tiny pieces called \"bits\". Each bit is either a 0 or a 1. Because of this, the fastest and easiest way for a computer to do division is by a bit shift operations -- division by two. Replacing regular division with bit shifts is a way to do program optimization. (Program optimization is trying to make a program faster and more efficient.)\nIn computer programming, the symbol <code\uFFFD\uFFFD></code> is sometimes used to show a bit shift operation. In Java, we can ask the computer to do the problem formula_1 by writing codice_2. This is the same as writing codice_2. Both of these versions will give us the answer codice_2. There is a problem when trying to do something a problem like formula_1. In Java, if we write codice_2, the computer will tell us the answer is codice_2. But if we try to do codice_2, the computer will say the answer is codice_2. This will happen every time we try to do a bit shift operation with one negative number. The reason for this is complicated, and has to do with the way negative binary numbers are saved by the computer.\nEven though it is fastest for computers to do division using bit shift operations, most computer code does not do it this way. This is because programmers want their programs to be \"portable\" and \"readable\". Portable means that a program can be run on many different kinds of computers and operating systems. Readable means that the source code is easy to read and understand. Most of the time, the compiler (a program that changes source code into 0's and 1's that the computer can understand) will change the division into bit shifts automatically.","categories":[],"infobox_types":[],"annotations":[{"uri":"Mathematics","surface_form":"mathematics","offset":16},{"uri":"Number","surface_form":"number","offset":55},{"uri":"Division_(mathematics)","surface_form":"divided","offset":65},{"uri":"Two","surface_form":"two","offset":76},{"uri":"Ancient_history","surface_form":"ancient","offset":105},{"uri":"Egypt","surface_form":"Egypt","offset":113},{"uri":"Operation_(mathematics)","surface_form":"operation","offset":153},{"uri":"Division_(mathematics)","surface_form":"division","offset":168},{"uri":"Mathematician","surface_form":"mathematician","offset":183},{"uri":"16th_century","surface_form":"16th century","offset":211},{"uri":"Computer_programming","surface_form":"computer programming","offset":307},{"uri":"Binary_numeral_system","surface_form":"binary","offset":410},{"uri":"Number_system","surface_form":"number system","offset":417},{"uri":"Digit","surface_form":"digit","offset":451},{"uri":"Represent","surface_form":"represented","offset":490},{"uri":"Decimal_numeral_system","surface_form":"decimal","offset":710},{"uri":"Bit_shift","surface_form":"bit shift","offset":857},{"uri":"Remainder","surface_form":"remainder","offset":1283},{"uri":"Computer","surface_form":"Computer","offset":1332},{"uri":"Bit","surface_form":"bit","offset":1443},{"uri":"Program_optimization","surface_form":"program optimization","offset":1663},{"uri":"Efficient","surface_form":"efficient","offset":1751},{"uri":"Computer_programming","surface_form":"computer programming","offset":1766},{"uri":"Java_programming_language","surface_form":"Java","offset":1867},{"uri":"Negative_number","surface_form":"negative number","offset":2343},{"uri":"Complicated","surface_form":"complicated","offset":2383},{"uri":"Negative_binary_numbers","surface_form":"negative binary numbers","offset":2423},{"uri":"Computer_code","surface_form":"computer code","offset":2562},{"uri":"Programmer","surface_form":"programmer","offset":2617},{"uri":"Software_portability","surface_form":"portable","offset":2656},{"uri":"Readable","surface_form":"readable","offset":2671},{"uri":"Operating_system","surface_form":"operating system","offset":2764},{"uri":"Source_code","surface_form":"source code","offset":2807},{"uri":"Compiler","surface_form":"compiler","offset":2873}]}