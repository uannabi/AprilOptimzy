{"id":3742,"url":"http://en.wikipedia.org/wiki/Compiler","text":"A compiler is a computer program that translates computer code written in one programming language into another programming language. The first language is called the source language, and the code is called source code. The second language is called the target and can usually be understood by computers. In that case, the instructions become machine code.\nIf a compiler can convert the same instruction text into machine code for different computers (like smartphones or video game machines), it is a 'cross-compiler'. If the compiler can make instruction text that is easier for people to read, it is a 'de-compiler'. People who write these instructions are called programmers. Some even made programs that can translate the instructions that describe how a compiler should work, into a compiler. That kind of program is called a compiler-compiler.\nA compiler usually has three steps. It reads the text and makes notes about how the words and sentences go together. If the words don't make sense, it will try to tell the programmer. Then it will use what it knows about the target language to make the instructions fit better. It then writes down the instructions in the target language. If the source instructions are on different pages, it may have to compile several before it can write everything down.\nCompiling the language.\nThe first piece, a lexical analyzer, reads a page of instruction text and splits it into words and sentences. It also marks the type for each word. For example, a word may be number, a variable, a verb, a math sign, or an adjective. The output of a lexical analyzer is a list of tokens.\ncodice_2\ncodice_2\nA parser reads in the output of the lexical analyzer, and verifies the syntax of the language. If the input program is syntactically incorrect or has a type error, it generates errors and warnings. This is called semantic analysis. For example, the parser might complain about the example above, if it \"had not\" already seen codice_2 with its type adjective. The parser uses all the information to make a structure typically called an Abstract Syntax Tree (AST).\nThe next piece, an optimizer rearranges the tree structure so the target language is optimized. 'Optimized' includes using fewer instructions to perform the same work. This could be important if the final program needs to check a lot of data. (Like seeing how many people, in the whole country, are fifty years old \"and\" buy medicine.) An 'optimized' result might also mean breaking long instructions into smaller ones. Unused and unaccessible code will be removed at this step.\nA programmer usually tries to write instructions in small, related groups. That way, they can keep track of fewer changes in the program. But, that means the code may go on several pages. When a compiler sees that the target program uses several pages to explain the whole recipe, it may use a linker. The linker will put instructions that say where to find the code that's next. Finally, the compiler writes down the instructions in the target language.\nADD 0, 5, spot_1\nLOAD location_y, spot_2\nADD spot_1, spot_2, spot_3\nSAVE spot_3, location_x\nProgrammers who write compiler code try to make it as perfect as possible. If the programmer writes incorrect code, the compiler informs of them an error, but if the compiler code itself contains errors, it may be hard to tell where exactly the problem lies.\nVariants.\nAt the end of each compilation step the partial finished product could be stored and then only processed later on. A language like Java uses this successfully, where they lack the final translation step to instructions the processor understands. They only do the final translation step once the Java program is running on a computer. This is either called \"interpreting\" or \"JIT\"ting, depending on the technique used.\nExample.\nFor example, the source code might contain an equation, such as \"x = 5*10 \". The lexical analyzer would separate each number and symbol (such as \"*\" or \"+\") into separate tokens. The parser would note the pattern of tokens, as being an equation. The intermediate-code generator would write a form of coding which defines a storage variable named \"x\" and assigns the numerical product of 5*10 plus 6 and 1. The optimizer would simplify the calculation, of 5*10+6+1, as being just 57. Hence, the target machine-code generator would set a variable named \"x\" and put the value 57 into that storage place in the computer's memory, using the instructions of whichever computer chip is being used.","categories":[],"infobox_types":[],"annotations":[{"uri":"Computer_program","surface_form":"computer program","offset":16},{"uri":"Translation","surface_form":"translates","offset":38},{"uri":"Programming_language","surface_form":"programming language","offset":78},{"uri":"Source_code","surface_form":"source code","offset":207},{"uri":"Machine_code","surface_form":"machine code","offset":343},{"uri":"Smartphone","surface_form":"smartphone","offset":457},{"uri":"Programmers","surface_form":"programmers","offset":667},{"uri":"Lexical_analyzer","surface_form":"lexical analyzer","offset":1352},{"uri":"Variable","surface_form":"variable","offset":1518},{"uri":"Token","surface_form":"tokens","offset":1612},{"uri":"Parser","surface_form":"parser","offset":1640},{"uri":"Semantic_analysis","surface_form":"semantic analysis","offset":1851},{"uri":"Abstract_Syntax_Tree","surface_form":"AST","offset":2095},{"uri":"Compiler_optimization","surface_form":"optimizer","offset":2120},{"uri":"Linker","surface_form":"linker","offset":2874},{"uri":"Interpreter_(computing)","surface_form":"interpreting","offset":3753},{"uri":"JIT","surface_form":"JIT","offset":3771},{"uri":"Example","surface_form":"example","offset":3827},{"uri":"Equation","surface_form":"equation","offset":3869},{"uri":"Number","surface_form":"number","offset":3941}]}