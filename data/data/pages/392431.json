{"id":392431,"url":"http://en.wikipedia.org/wiki/Horn_clause","text":"A Horn clause is a logic disjunction of literals, where at most one of the literals is positive, and all the others are negative. It is named after Alfred Horn who described them in an article in 1951.\nHorn clauses play a basic role in constructive logic and computational logic. They are important in automated theorem proving by first-order resolution, because the resolvent of two Horn clauses is itself a Horn clause, and the resolvent of a goal clause and a definite clause is a goal clause. These properties of Horn clauses can lead to greater efficiencies in proving a theorem (represented as the negation of a goal clause).\nIn fact, the resolution of a goal clause with a definite clause to produce a new goal clause is the basis of the SLD resolution inference rule, used to implement logic programming and the programming language Prolog.\nThe Prolog notation is actually ambiguous, and the term \u201Cgoal clause\u201D is sometimes also used ambiguously. The variables in a goal clause can be read as universally or existentially quantified, and deriving \u201Cfalse\u201D can be interpreted either as deriving a contradiction or as deriving a successful solution of the problem to be solved.\nVan Emden and Kowalski (1976) investigated the model theoretic properties of Horn clauses in the context of logic programming, showing that every set of definite clauses D has a unique minimal model M. An atomic formula A is logically implied by D if and only if A is true in M. It follows that a problem P represented by an existentially quantified conjunction of positive literals is logically implied by D if and only if P is true in M. The minimal model semantics of Horn clauses is the basis for the stable model semantics of logic programs.\nPropositional Horn clauses are also of interest in computational complexity, where the problem of finding truth value assignments to make a conjunction of propositional Horn clauses true is a P-complete problem (in fact solvable in linear time), sometimes called HORNSAT. (The unrestricted Boolean satisfiability problem is an NP-complete problem however.) Satisfiability of first-order Horn clauses is undecidable.","categories":[],"infobox_types":[],"annotations":[{"uri":"Inclusive_disjunction","surface_form":"logic disjunction","offset":19},{"uri":"Literal","surface_form":"literal","offset":40},{"uri":"Alfred_Horn","surface_form":"Alfred Horn","offset":148},{"uri":"Constructive_logic","surface_form":"constructive logic","offset":236},{"uri":"Computational_logic","surface_form":"computational logic","offset":259},{"uri":"Automated_theorem_proving","surface_form":"automated theorem proving","offset":302},{"uri":"First-order_resolution","surface_form":"first-order resolution","offset":331},{"uri":"SLD_resolution","surface_form":"SLD resolution","offset":745},{"uri":"Logic_programming","surface_form":"logic programming","offset":794},{"uri":"Prolog","surface_form":"Prolog","offset":841},{"uri":"Stable_model_semantics","surface_form":"stable model semantics","offset":1688},{"uri":"Computational_complexity","surface_form":"computational complexity","offset":1781},{"uri":"P-complete","surface_form":"P-complete","offset":1922},{"uri":"Linear_time","surface_form":"linear time","offset":1962},{"uri":"Horn-satisfiability","surface_form":"HORNSAT","offset":1993},{"uri":"Boolean_satisfiability_problem","surface_form":"Boolean satisfiability problem","offset":2020},{"uri":"NP-complete","surface_form":"NP-complete","offset":2057},{"uri":"Undecidable_problem","surface_form":"undecidable","offset":2133}]}