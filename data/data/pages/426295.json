{"id":426295,"url":"http://en.wikipedia.org/wiki/Assembler","text":"e=\"preserve\">In computer science an assembler is a program that turns assembly language into machine code.\nAn assembler is a program that takes basic computer instructions and converts them into a pattern of bits that the computer's processor can use to perform its basic operations. Some people call these instructions assembler language and others use the term assembly language.\nThe programmer can write a program using a sequence of these assembler instructions.\nThis sequence of assembler instructions, known as the source code or source program, is then specified to the assembler program when that program is started.\nThe assembler program takes each program statement in the source program and generates a corresponding bit stream or pattern (a series of 0's and 1's of a given length).\nThe output of the assembler program is called the object code or object program relative to the input source program. The sequence of 0's and 1's that constitute the object program is sometimes called machine code.\nThe object program can then be run (or executed) whenever desired.\nIn the earliest computers, programmers actually wrote programs in machine code, but assembler languages or instruction sets were soon developed to speed up programming. Today, assembler programming is used only where very efficient control over processor operations is needed. It requires knowledge of a particular computer's instruction set, however. Historically, most programs have been written in \"higher-level\" languages such as COBOL, FORTRAN, PL/I, and C. These languages are easier to learn and faster to write programs with than assembler language. The program that processes the source code written in these languages is called a compiler. Like the assembler, a compiler takes higher-level language statements and reduces them to machine code.\nA newer idea in program preparation and portability is the concept of a virtual machine. For example, using the Java programming language, language statements are compiled into a generic form of machine language known as bytecode that can be run by a virtual machine, a kind of theoretical machine that approximates most computer operations. The bytecode can then be sent to any computer platform that has previously downloaded or built in the Java virtual machine. The virtual machine is aware of the specific instruction lengths and other particularities of the platform and ensures that the Java bytecode can run.","categories":[],"infobox_types":[],"annotations":[{"uri":"Computer_science","surface_form":"computer science","offset":16},{"uri":"Computer_program","surface_form":"program","offset":51},{"uri":"Assembly_language","surface_form":"assembly language","offset":70},{"uri":"Machine_code","surface_form":"machine code","offset":93},{"uri":"Instruction_(computer_science)","surface_form":"computer instructions","offset":150}]}