{"id":453987,"url":"http://en.wikipedia.org/wiki/D_(programming_language)","text":"The D programming language is an object-oriented, imperative, multi-paradigm system programming language. D language originated as a re-engineering of C++, and D's design goals try combining the performance of compiled languages with the safety and expressive power of modern dynamic languages. Native D code is commonly as fast as equivalent C++ code, while being shorter and memory-safe.\nExample 1.\nThis example program prints its command line arguments. The codice_2 function is the entry point of a D program, and codice_2 is an array of strings representing the command line arguments. A codice_2 in D is an array of characters, represented by codice_2 in D1, or codice_2 in D2.\nThe codice_2 statement can iterate over any collection. In this case, it is producing a sequence of indexes (codice_2) and values (codice_2) from the array codice_2. The index codice_2 and the value codice_2 have their types inferred from the type of the array codice_2.\nExample 2.\nThe following shows several D capabilities and D design trade-offs in a very short program. It iterates the lines of a text file named codice_2 that contains a different word on each line, and prints all the words that are anagrams of other words.\n<syntaxhighlight lang=\"D\">import std.stdio, std.algorithm, std.range, std.string;","categories":[],"infobox_types":[],"annotations":[{"uri":"Object-oriented_programming","surface_form":"object-oriented","offset":33},{"uri":"Imperative_programming","surface_form":"imperative","offset":50},{"uri":"Multi-paradigm_programming_language","surface_form":"multi-paradigm","offset":62},{"uri":"System_programming_language","surface_form":"system programming language","offset":77},{"uri":"C%2B%2B","surface_form":"C++","offset":151},{"uri":"Dynamic_languages","surface_form":"dynamic languages","offset":276},{"uri":"Memory-safe","surface_form":"memory-safe","offset":377}]}