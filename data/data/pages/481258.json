{"id":481258,"url":"http://en.wikipedia.org/wiki/Join_(SQL)","text":"e=\"preserve\">A SQL Join clause is a way to retrieve information from two or more tables in a database. When a database programmer wants to do a join command, they will type about the databases they want to get information from, and the type of join they want to use. There are five types of joins. A normal codice_2, which is also called an codice_2, a codice_2, acodice_2, acodice_2 and codice_2.\nIn order for a join to work, there must be information in the tables to be joined that is the same between them.\nJoin (Also called an Inner Join).\nImagine two tables called Employee and Department.\nSuppose a database administrator wanted to know what employee worked in what department. While someone could just compare the ID numbers between the two tables, a way to have the information in one place is by doing a JOIN, also known as an INNER JOIN. Because they have one type of data in common, the department ID, the tables can be joined together.\nSELECT LastName, DepartmentName FROM employee join department on department.DepartmentID = employee.DepartmentID;\nBecause Williams in the employee table did not have an department ID, Williams was not printed in the final result.\nOuter Join.\nInner joins are fine if both tables have a matching record. However, if one table does not have a record for what the join is being built on, the query will fail. But if a database programmer needs to grab information in an event that there is not a matching record for a row on one of the tables, they need to use an outer join.\nLeft Outer Join (Also known as a Left Join).\nA left outer join (also known as a left join) will contain all records from the left table, even if the right table does not have a matching record for each row.\nThis command is run, which joins the two tables together on a left join.\nLEFT OUTER JOIN department ON employee.DepartmentID = department.DepartmentID;\nUnlike the inner join, Williams is printed in the final result, even though Williams did not have a department ID. Because Employee was the left table, or the table first mentioned in the SQL query, SQL returns all of the relevant data needed from it. However, since there was not a department ID for Williams, the Department table was only able to return a null result.\nRight Outer Join (Also known as a Right Join).\nA right outer join works almost like a left outer join, except with how the tables are handled reversed. This time, all of the relevant information will be returned from the right table, even if the left table does not have a matching result. If the left table does not have a matching result, null will be in the place of the missing data.\nThis command is run, which joins the two tables together on a right join.\nFROM employee RIGHT OUTER JOIN department\nAnd this is the final result.\nFlexibility of Joins.\nLEFT OUTER JOIN department ON employee.DepartmentID = department.DepartmentID;\nto this (notice how employee and department have switched places)\nLEFT OUTER JOIN employee ON employee.DepartmentID = department.DepartmentID;","categories":[],"infobox_types":[],"annotations":[{"uri":"SQL","surface_form":"SQL","offset":15},{"uri":"Table_(database)","surface_form":"tables","offset":81}]}