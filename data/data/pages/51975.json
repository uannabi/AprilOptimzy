{"id":51975,"url":"http://en.wikipedia.org/wiki/Data_structure","text":"ce=\"preserve\">In computer science, a data structure is the organization and implementation of values and information. In simple words data structure is the way of organizing data in efficient manner. Data structures are different from abstract data types in the way they are used. Data structures are the implementations of abstract data types in a concrete and physical setting. They do this by using algorithms. This can be seen in the relationship between the list (abstract data type) and the linked list (data structure). A list contains a sequence of values or bits of information. A linked list also has a \u201Cpointer\u201D or \u201Creference\u201D between each node of information that points to the next item and the previous one. This allows one to go forwards or backwards in the list. Furthermore, data structures are often optimized for certain operations. Finding the best data structure when solving a problem is an important part of programming. Data structure is a systematic way to store data\nArray.\nThe simplest type of data structure is a linear array. Also known as a one-dimensional array. An array holds several values of the same type (Integer, Floats, String, etc.). Accessing elements within the array is very fast. An array is normally of fixed size. After the size of the array is defined at the start, it may not be possible to increase the size of the array without creating a new larger array and copying all values into the new array. In\u00A0computer science, an\u00A0array data structure\u00A0or simply an\u00A0array\u00A0is a\u00A0data structure\u00A0consisting of a collection of\u00A0\"elements\"\u00A0(values\u00A0or\u00A0variables), each identified by at least one\u00A0\"array index\"\u00A0or\u00A0\"key\". An array is stored so that the position of each element can be computed from its index\u00A0tuple by a mathematical formula.\nFor example, an array of 10 integer variables, with indices 0 through 9, may be stored as 10\u00A0words\u00A0at memory addresses 2000, 2004, 2008, 2036, so that the element with index\u00A0\"i\"\u00A0has the address 2000 + 4 \u00D7\u00A0\"i.\"\nAs the mathematical concept of a\u00A0matrix\u00A0can be represented as a two-dimensional grid, two-dimensional arrays are also sometimes called matrices. In some cases the term \"vector\" is used in computing to refer to an array, although\u00A0tuples\u00A0rather than\u00A0vectors\u00A0are the more correct mathematical equivalent. Arrays are often used to implement\u00A0tables, especially\u00A0look up tables; the word\u00A0\"table\"\u00A0is sometimes used as a synonym of\u00A0\"array\".\nArrays are among the oldest and most important data structures, and are used by almost every program. They can also be used to implement many other data structures, such as\u00A0lists\u00A0and\u00A0strings. They effectively exploit the addressing logic of computers. In most modern computers and many\u00A0external storage\u00A0devices, the memory is a one-dimensional array of words, whose indices are their addresses.\u00A0Processors, especially\u00A0vector processors, are often optimized for array operations.\nArrays are useful because the element indices can be computed at\u00A0run time. Among other things, this feature allows a single iterative\u00A0statement\u00A0to process arbitrarily many elements of an array. For that reason, the elements of an array data structure are required to have the same size and should use the same data representation. The set of valid index tuples and the addresses of the elements (and hence the element addressing formula) are usually,\u00A0but not always, fixed while the array is in use.\nThe term\u00A0\"array\"\u00A0is often used to mean\u00A0array data type, a kind of\u00A0data type\u00A0provided by most\u00A0high-level programming languages\u00A0that consists of a collection of values or variables that can be selected by one or more indices computed at run-time. Array types are often implemented by array structures; however, in some languages they may be implemented by\u00A0hash tables,\u00A0linked lists,\u00A0search trees, or other data structures.\nLinked list.\nA\u00A0linked data structure\u00A0is a set of\u00A0information/data\u00A0linked together by\u00A0references. The data are often called \"nodes\". The references are often called \"links\" or \"pointers\". From here on, the words \"node\" and \"pointer\" will be used for these concepts.\nIn linked data structures, pointers are only\u00A0dereferenced\u00A0or compared for equality. Thus, linked data structures are different than\u00A0arrays, which require adding and subtracting pointers.\nLinked lists,\u00A0search trees,\u00A0and expression trees are all linked data structures. They are also important in algorithms such as\u00A0topological sort\u00A0and\u00A0set union-find.\nStack.\nA stack is a basic data structure that can be logically thought as linear structure represented by a real physical stack or pile, a structure where insertion and deletion of items takes place at one end called top of the stack. The basic concept can be illustrated by thinking of your data set as a stack of plates or books where you can only take the top item off the stack in order to remove things from it. This structure is used all throughout programming.\nThe basic implementation of a stack is also called a \u201CLast In First Out\u201D structure; however there are different variations of stack implementations.\nQueue.\nA queue is an abstract data type or a linear data structure, in which the first element is inserted from one end (the \u201Ctail\u201D), and the deletion of existing element takes place from the other end (the \u201Chead\u201D). A queue is a \u201CFirst In First Out\u201D structure. \"First In First Out\" means that elements put in the queue first will come out first, and elements put in the queue last will come out last. An example of a queue are lines of people waiting. The first person in the line goes first, and the last person in the line goes last.\nThe process of adding an element to a queue is called \u201Cenqueuing\u201D and the process of removing an element from a queue is called \u201Cdequeuing\u201D.\nGraph.\nA\u00A0graph\u00A0is an\u00A0abstract data type\u00A0that is meant to implement the\u00A0graph\u00A0and\u00A0hypergraph\u00A0concepts from mathematics.\nA graph data structure consists of a finite (and possibly mutable)\u00A0set\u00A0of ordered pairs, called\u00A0edges\u00A0or\u00A0arcs, of certain entities called nodes\u00A0or\u00A0vertices'\". As in mathematics, an edge (\"x\",\"y\") is said to\u00A0point\u00A0or\u00A0go\u00A0from\u00A0\"x\"\u00A0to\u00A0\"y\". The nodes may be part of the graph structure, or may be external entities represented by integer indices or\u00A0references. A graph data structure may also associate to each edge some\u00A0edge value, such as a symbolic label or a numeric attribute.\nTree.\nThe tree is one of the most powerful advanced data structures. It often appears in advanced subjects such as Artificial Intelligence (AI) and design. Surprisingly, the tree is important in a much more basic application - the keeping of an efficient index.\nWhen a tree is used there is a high chance that an index is used. The simplest type of index is a sorted list of key fields. A tree normally has a defined structure. In the case of a binary tree, you can use a binary search to locate any item without having to look at every item.\nThe tree data type is a type of graph meaning that many algorithms made to traverse a graph also work with a tree however, the algorithms can be much similar and must have a dedicated start node, that is the node with no other nodes linking to it.\nThe problem with a simple ordered list occurs when you start adding new items and have to keep the list sorted - it can be done reasonably efficiently but requires some modifications. Additionally, a linear index is not easy to share because the whole index needs to be \u201Clocked\u201D when one user edits it, whereas one \u201Cbranch\u201D of a tree can be locked, leaving the other branches editable by other users (as they cannot be affected).\nHash Table.\nA hash table is an array where each index points to a linked list based on a hash value. A hash value is a value determined by a hash function. A hash function determines a unique value based on the data it is storing. This allows for access of data in constant time because the computer always knows where to look.","categories":[],"infobox_types":[],"annotations":[{"uri":"Computer_science","surface_form":"computer science","offset":17},{"uri":"Information","surface_form":"information","offset":105},{"uri":"Algorithm","surface_form":"algorithm","offset":402},{"uri":"List","surface_form":"list","offset":529},{"uri":"Programming","surface_form":"programming","offset":931},{"uri":"Tuple","surface_form":"tuple","offset":1740},{"uri":"Graph_(Data_Structure)","surface_form":"graph","offset":5734}]}