{"id":560430,"url":"http://en.wikipedia.org/wiki/Scripting_language","text":"ce=\"preserve\">A scripting or script language is a programming language that supports scripts. Scripts are usually short computer programs that do steps that could be done one at a time by a person. This automates a job to make it easier and more reliable. A scripting language is often a simpler language, and easier to learn than other languages, but still can do many things.\nScripts may run inside of another program, like in a web browser or Microsoft Excel. They may also be a \"shell\" that runs from a command line interface and makes calls to the operating system (OS). The shell is considered \"interactive\" - the user can choose what to type, and the shell responds to the command. These can be used to control jobs on mainframes and servers.\nSome people say a scripting language must be tied to a specific use. Others use a wider definition and include general-purpose programming languages that are interpreted, not compiled. \"General-purpose\" means it can be used in many ways for different things. Some general-purpose languages (such as Java) have variations that can be scripted (Javascript). There is no specific rule on what is, or is not, a scripting language.\nCharacteristics.\nMost scripting languages are made to be easy to learn. They often can be either short files with source code, or entered one command at a time in a command line interface, which has a read\u2013eval\u2013print loop (REPL, language shell). This usually means a simple set of commands. There might not be functions or a \"main\", it just runs from start to finish. If something doesn't work, a programmer can make quick changes and run it again. This makes a scripting language good for making a \"rapid prototype\" to see if an idea works.\nFor example, most people do not call Java a scripting language, because of its lengthy syntax and rules about which classes exist in which files, and because Java cannot be executed interactively in a REPL. It needs files with source code, and they can only contain definitions that must be used by a host application or application launcher. (Java is not the same as JavaScript).\nBut Python allows choices - functions can be put in a file, it can be run without functions and use imperative programming style, or even use it interactively (type and run one line at a time).\ncodice_2\nThis one line of Python code prints \"Hello World\"; no \"main()\" function or anything else is needed.\nA scripting language is usually interpreted from source code or bytecode. However, something has to run the script (interpret it) so the computer understands it. This is an application, or something in the OS. That is often written in a compiled language and distributed in machine code form (as an \"executable\" that doesn't make sense to humans).\nScripting languages may be designed to be used by the people using a program \u2014 end-user development. Other times they may be built by programmers for their own use. Scripting languages often use abstraction, a form of information hiding. This means users do not need to know the details of variable types, data storage, and memory management.\nScripts are often made or changed by the person executing them, but some are shared or sold to others. For example, when large parts of games are written in a scripting language. Sometimes a script can be compiled before others use it. Once compiled, it will run faster and doesn't need another application to run it. And this prevents end users from changing the code.\nHistory.\nEarly mainframe computers (in the 1950s) were not interactive, but used scripts stored in \"batch files\". IBM's Job Control Language (JCL) is the common example of a scripting language used to control batch processing.\nThe first interactive shells were made in the 1960s to help remote operation of the first time-sharing systems. These used shell scripts, which can run computer programs within a computer program, the shell. Calvin Mooers in his TRAC language is generally given credit with inventing \"command substitution\". This lets commands change the script (self-modifying code). Multics calls these \"active functions\". Louis Pouzin wrote an early processor for command scripts called RUNCOM for CTSS around 1964. Stuart Madnick at MIT wrote a scripting language for IBM's CMS in 1966. He originally called this processor COMMAND, later named EXEC. Multics included an offshoot of CTSS RUNCOM, also called RUNCOM. EXEC was eventually replaced by EXEC 2 and REXX.\nLanguages such as Tcl and Lua were made from the start to be general-purpose scripting languages that could be put into any application. Other languages such as Visual Basic for Applications (VBA) could do much of the same, but needed to work only with certain applications. Using a general-purpose scripting language instead of making a new language for each application usually makes it easier for both the person writing the application and the user writing the scripts.\nGlue languages.\nScripting is sometimes used to connect different applications. This is called glue code, and a language made just for this purpose is a \"glue language\". Pipelines and shell scripting are common examples of glue languages. But if a lot of logic is written in a script file, it is better to think of it as simply another software application, not \"glue\".\nDevices like programmable calculators may also have their own glue languages. For example, the Texas Instruments TI-92, by factory default can be programmed with a command script language. The TI-NSpire calculator understands the Lua language. Others understand some kind of Basic language, or maybe Lisp or something else.\nJob control languages and shells.\nThis group has come from the automation of job control, which relates to starting and controlling the behavior of system programs, starting from IBM's JCL. Many of these languages' interpreters also work as command-line interpreters such as the Unix shell or the MS-DOS codice_2. Others, such as AppleScript offer the use of English-like commands to build scripts.\nGUI scripting.\nWhen building graphical user interfaces, a way of testing it is needed. Specialized scripting languages were made to control graphic windows, menus, buttons, and so on just like a human user would. Many times, these can be used to copy exactly what a person does (moving a mouse, clicking or typing on a keyboard). This action or set of actions that is copied and remembered is called a macro.\nApplication-specific languages.\nMany large applications include a scripting language built just for that application. The application can be a game or a business program. This type of language is made for a single application. They make look like a general-purpose language (e.g. QuakeC, modeled after C), they have custom features that distinguish them.\nExtension/embeddable languages.\nThis is like an application-specific scripting languages, in that it controls an application, but the language can be used in many applications.\nJavaScript started as a language for scripting inside web browsers; but it is now a general-purpose embeddable language. It is also used in Adobe products for instance.\nSome languages shift from one type to another over time, usually as they add capability to do more things.","categories":[],"infobox_types":[],"annotations":[{"uri":"Programming_language","surface_form":"programming language","offset":50},{"uri":"Computer","surface_form":"computer","offset":120},{"uri":"Web_browser","surface_form":"web browser","offset":431},{"uri":"Microsoft_Excel","surface_form":"Microsoft Excel","offset":446},{"uri":"Shell_(computing)","surface_form":"shell","offset":483},{"uri":"Graphical_user_interfaces_and_consoles","surface_form":"command line interface","offset":507},{"uri":"Operating_system","surface_form":"operating system","offset":553},{"uri":"Mainframe_computer","surface_form":"mainframes","offset":726},{"uri":"Server","surface_form":"server","offset":741},{"uri":"General-purpose_programming_language","surface_form":"general-purpose programming language","offset":861},{"uri":"Compiler","surface_form":"compiled","offset":925},{"uri":"Java","surface_form":"Java","offset":1049},{"uri":"Javascript","surface_form":"Javascript","offset":1093},{"uri":"Read%E2%80%93eval%E2%80%93print_loop","surface_form":"read\u2013eval\u2013print loop","offset":1378},{"uri":"Function","surface_form":"function","offset":1487},{"uri":"Prototype","surface_form":"prototype","offset":1683},{"uri":"Java_(programming_language)","surface_form":"Java","offset":1756},{"uri":"Imperative_programming","surface_form":"imperative programming","offset":2200},{"uri":"Interpreter_(computing)","surface_form":"interpreted","offset":2435},{"uri":"Bytecode","surface_form":"bytecode","offset":2467},{"uri":"Compiled_language","surface_form":"compiled language","offset":2640},{"uri":"Machine_code","surface_form":"machine code","offset":2677},{"uri":"End-user_development","surface_form":"end-user development","offset":2830},{"uri":"Abstraction_(computer_science)","surface_form":"abstraction","offset":2946},{"uri":"Mainframe_computer","surface_form":"mainframe computer","offset":3479},{"uri":"Batch_file","surface_form":"batch file","offset":3564},{"uri":"Job_Control_Language","surface_form":"Job Control Language","offset":3584},{"uri":"Time-sharing","surface_form":"time-sharing","offset":3781},{"uri":"Shell_scripts","surface_form":"shell scripts","offset":3814},{"uri":"Calvin_Mooers","surface_form":"Calvin Mooers","offset":3899},{"uri":"TRAC_(programming_language)","surface_form":"TRAC","offset":3920},{"uri":"Multics","surface_form":"Multics","offset":4059},{"uri":"Louis_Pouzin","surface_form":"Louis Pouzin","offset":4099},{"uri":"Compatible_Time_Sharing_System","surface_form":"CTSS","offset":4175},{"uri":"Stuart_Madnick","surface_form":"Stuart Madnick","offset":4193},{"uri":"CMS","surface_form":"CMS","offset":4252},{"uri":"CMS_EXEC","surface_form":"EXEC","offset":4322},{"uri":"CMS_EXEC","surface_form":"EXEC","offset":4393},{"uri":"EXEC_2","surface_form":"EXEC 2","offset":4425},{"uri":"REXX","surface_form":"REXX","offset":4436},{"uri":"Tcl","surface_form":"Tcl","offset":4460},{"uri":"Lua_(programming_language)","surface_form":"Lua","offset":4468},{"uri":"Glue_code","surface_form":"glue code","offset":5010},{"uri":"Texas_Instruments","surface_form":"Texas Instruments","offset":5380},{"uri":"TI-92","surface_form":"TI-92","offset":5398},{"uri":"Lisp","surface_form":"Lisp","offset":5585},{"uri":"Job_control_(computing)","surface_form":"job control","offset":5686},{"uri":"Command-line_interpreter","surface_form":"command-line interpreter","offset":5850},{"uri":"Unix_shell","surface_form":"Unix shell","offset":5888},{"uri":"AppleScript","surface_form":"AppleScript","offset":5939},{"uri":"QuakeC","surface_form":"QuakeC","offset":6697},{"uri":"Web_browser","surface_form":"web browser","offset":7003},{"uri":"Adobe_Systems","surface_form":"Adobe","offset":7089}]}