{"id":561512,"url":"http://en.wikipedia.org/wiki/NP-hardness","text":"An NP-hard problem is a yes/no problem where finding a solution for it is at least as hard as finding a solution for the hardest problem whose solution can quickly be checked as being true. Some NP-hard problems are ones where a working solution can be checked quickly (NP problems) and some are not. NP-hard problems that are also NP problems fit into a category called NP-complete.\nExamples.\nA travelling salesman wants to visit 100 cities by driving, starting and ending his trip at home. He has a limited supply of gasoline, so he can only drive a total of 10,000 kilometers. He wants to know if he can visit all of the cities without running out of gasoline.\nPeople don't know how to solve this problem faster than testing every possible answer, but if a solution is found that allows the salesman to do this, we can use an algorithm check that it is true. This problem is also known as Travelling salesman problem.\nif someone starts a program that simply goes,\nand never stops it, will it run forever?\nThere is no known way to find a solution to all problems of this kind, and this also cannot be checked.\n__INDEX__","categories":[],"infobox_types":[],"annotations":[{"uri":"NP-complete","surface_form":"NP-complete","offset":371},{"uri":"Algorithm","surface_form":"algorithm","offset":829},{"uri":"Travelling_salesman_problem","surface_form":"Travelling salesman problem","offset":892}]}