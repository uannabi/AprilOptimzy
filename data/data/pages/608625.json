{"id":608625,"url":"http://en.wikipedia.org/wiki/Microservices","text":"e=\"preserve\">In classical software architecture, the architecture is often layered. There is one layer for the user interface, another for the application logic, and yet another for accessing persistent data (such as a database). In classical software architecture, an application server is used, which will run the different services (such as different entrypoints of a web site, or different parts of the business application). The problem with this approach is that such application servers often do not scale very well, they need a lot of resources, and services are often tightly coupled.\nMicroservices are patterns of Software architecture: The approach is similar to the pattern described above, but the services are very small: very often they only provide one or two very specific functions. To get the same situation as above, these services must interact with each other. Very often they do this using RESTful service calls. Each microservice still has the parts of the user interface layer, the application layer, and the layer to access persistent data. Very often, microservices run in an application container. When the load requires it, special software in the application container can be used to run several instances (or copies) of the specific service.","categories":[],"infobox_types":[],"annotations":[{"uri":"Software_architecture","surface_form":"software architecture","offset":26},{"uri":"Database","surface_form":"database","offset":219},{"uri":"Application_server","surface_form":"application server","offset":269},{"uri":"RESTful","surface_form":"RESTful","offset":913}]}