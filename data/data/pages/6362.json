{"id":6362,"url":"http://en.wikipedia.org/wiki/Programming_language","text":"A programming language is a type of written language that tells computers what to do. Programming languages are used to write all computer programs and computer software. A programming language is like a set of instructions that the computer follows to do something.\nA programmer writes text in the source code of a programming language to make programs. Usually, the programming language uses real words for some of the commands (e.g. \"go to\", \"if... then... else...\", etc.), so that the language is easier for a human to understand. Like any normal language, many programming languages use punctuation. Many programs are then compiled, which means that the computer changes, or translates, the source code into another language (such as assembly language or machine language) that a computer can read, but which is much harder for a person to read.\nComputer programs must be written very carefully. If a programmer makes mistakes, or a program tries to do something the programmer did not design it to do, then the program might then stop working, which is called \"crashing\". When a program has a problem because of how the code was written, this is called a \"bug\". A very small mistake can cause a very big problem.\nTypes of programming languages.\nThere are many types of programming languages. Most programming languages do not follow one type alone, so it is difficult to assign a type for each language. The examples of each type are given in each section below because they are the best well-known examples of that type.\nHigh-level vs. low-level.\nHigh-level programming languages require less knowledge about the hardware compared to low-level programming languages. This is because high-level programming languages abstract away the hardware the program is running on. Many high-level languages require an interpreter to run the source code on the hardware in real time. On the other hand, low-level languages usually convert the whole source code to machine code before running, because the source code is so close to the hardware that it is easy to do so.\nDeclarative vs. Imperative programming.\n\"Declarative\" programming languages describe a \"problem\" but they usually do not say how the problem should be solved. The problem description uses logic, and \"solving\" the problem often looks like automatically proving a system of logical axioms. Examples for such programming languages are Prolog, XSLT, LISP and SQL.\n\"Imperative\" programming languages describe a system of state changes. At the start, the program is in a certain \"state\", and the computer is given steps to follow, in order to perform an action. Following the steps causes the program to \"change state\".\nIn general, declarative programming languages are safer and shorter. Imperative programming languages are more common, because they are easier to use.\nFunctional vs. Procedural.\nFunctional programming looks at programming like a function in mathematics. The program receives \"input\", together with some information, and uses this information to create \"output\". It will not have a state in between, and it will also not change things that are not related to the computation.\nProcedural programs specify or describe sets of steps or state changes.\nStack based.\nStack based languages look at some of the program's memory like a stack of cards. There are very few things that can be done with a stack. A data item can be put on the top of the stack. This operation is generally called \"push\". A data item can be removed from the top of the stack. This is called a \"pop\". You can look at the item at the top of the stack without removing it. This is called a \"peek\".\nIf a program is written as \"push 5; push 3; add; pop;\" it will put 5 on the top of the stack, put 3 on top of the 5, add the top two values (3 + 5 = 8), replace the 3 and 5 with the 8, and print the top (8). Examples for programming languages that are stack-based are the languages Postscript and Forth.\nObject-oriented.\nObject-oriented programming languages place data and \"functions\" that change data into a single unit. This unit is called an \"object\". Objects can interact with each other and change another object's data. This is usually called encapsulation or information hiding. Most modern programming languages are object-oriented, or at least allow this style of programming. Examples of this are Java, Python, Ruby, C++, and other C languages.\nFlow-oriented.\nFlow oriented programming sees programming as connecting different components. These components send messages back and forth. A single component can be part of different \"programs\", without the need to be changed internally.\nDocument creation.\nLaTeX and SATySFi are programming languages which helps document creation.\nRules.\nMost languages have official standards that define the rules of how to write the source code. Some programming languages have two or more standards. This can happen when a new standard replaces an old one. For example, the Perl 5 standard replaced Perl 4 in 1993. It can happen because two people made two standards at the same time. For example, there are several standards for APL.\nObject-Oriented Programming.\nObject-Oriented Programming (sometimes shortened to OOP) is a form of programming where all parts of the program are objects. Objects are pieces of memory with the same structure that can be used again and again. A bank account, bitmap, or hero from a video game could all be objects within a program. Objects are made up of properties (pieces of information the object stores) and methods which are things the object can do. A Dog object might have properties like height and hairColor. Its methods might include bark() and wagTail().\nAll objects are created from templates called classes. You can think of a class as a mold from which objects are made. The class defines all the properties and methods that its objects will have. Objects created from a class are called instances of the class. A class can \"extend\" another class, which means that it takes all the properties and methods of the class but can add its own.\nNotice that the Dog class extends the Mammal class, so all dogs will have the properties of a mammal, like hairLength, and methods, like eat() or sleep().\nObject-oriented programming is used in many of today's most popular programming languages, such as Java, Objective-C, C++, Python, Ruby, Javascript, and ActionScript.\nExample of Visual Basic.\nInput = InputBox(\"How old are you?? - Code\")\nMsgBox & Input & \"That's not a number!\"\nMsgBox \"You cannot be less than that age!\"\nMsgBox \"You're \" & Input & \" years old.\"\nThis program asks the user his or her age and responds based on what the user typed. If the user typed something that is not a number, the program says so. If the user typed a number less than zero, the program says so. If the user says he or she is older than 100 years old, the program says \"That's old!\" If the user typed a correct age the program says back to the user how old he or she is.\nExample of Python.\nage = int(raw_input(\"How old are you? \"))\nprint (\"You cannot be less than zero!\")\nprint(\"You're %s years old.\" % age)\nExample of Haskell.\nJust age | age < 0 -> \"You cannot be less than zero!\"\nNothing -> \"That's not a number!\"","categories":[],"infobox_types":[],"annotations":[{"uri":"Language","surface_form":"language","offset":44},{"uri":"Computers","surface_form":"computers","offset":64},{"uri":"Computer_programs","surface_form":"computer programs","offset":130},{"uri":"Computer_software","surface_form":"computer software","offset":152},{"uri":"Source_code","surface_form":"source code","offset":299},{"uri":"Punctuation","surface_form":"punctuation","offset":592},{"uri":"Compiled","surface_form":"compiled","offset":628},{"uri":"Translation","surface_form":"translates","offset":680},{"uri":"Assembly_language","surface_form":"assembly language","offset":739},{"uri":"Machine_language","surface_form":"machine language","offset":760},{"uri":"Software_bug","surface_form":"bug","offset":1162},{"uri":"High-level_programming_language","surface_form":"High-level programming language","offset":1554},{"uri":"Hardware","surface_form":"hardware","offset":1620},{"uri":"Low-level_programming_language","surface_form":"low-level programming language","offset":1641},{"uri":"Abstract","surface_form":"abstract","offset":1723},{"uri":"Interpreter_(computing)","surface_form":"interpreter","offset":1814},{"uri":"Machine_code","surface_form":"machine code","offset":1959},{"uri":"Logic","surface_form":"logic","offset":2254},{"uri":"Axiom","surface_form":"axiom","offset":2346},{"uri":"Prolog","surface_form":"Prolog","offset":2398},{"uri":"XSLT","surface_form":"XSLT","offset":2406},{"uri":"LISP","surface_form":"LISP","offset":2412},{"uri":"SQL","surface_form":"SQL","offset":2421},{"uri":"Functional_programming","surface_form":"Functional programming","offset":2858},{"uri":"Function_(mathematics)","surface_form":"function","offset":2909},{"uri":"Mathematics","surface_form":"mathematics","offset":2921},{"uri":"Stack_based","surface_form":"Stack based","offset":3240},{"uri":"Information","surface_form":"data","offset":3381},{"uri":"Postscript","surface_form":"Postscript","offset":3925},{"uri":"Forth","surface_form":"Forth","offset":3940},{"uri":"Object-oriented_programming","surface_form":"Object-oriented programming","offset":3964},{"uri":"Encapsulation_(object-oriented_programming)","surface_form":"encapsulation","offset":4193},{"uri":"Java_programming_language","surface_form":"Java","offset":4351},{"uri":"Python_(programming_language)","surface_form":"Python","offset":4357},{"uri":"Ruby_(programming_language)","surface_form":"Ruby","offset":4365},{"uri":"C%2B%2B","surface_form":"C++","offset":4371},{"uri":"LaTeX","surface_form":"LaTeX","offset":4658},{"uri":"SATySFi","surface_form":"SATySFi","offset":4668},{"uri":"Perl","surface_form":"Perl","offset":4963},{"uri":"APL","surface_form":"APL","offset":5119},{"uri":"Hero","surface_form":"hero","offset":5393},{"uri":"Video_game","surface_form":"video game","offset":5405},{"uri":"Java_programming_language","surface_form":"Java","offset":6330},{"uri":"Objective-C","surface_form":"Objective-C","offset":6336},{"uri":"C%2B%2B","surface_form":"C++","offset":6349},{"uri":"Python_programming_language","surface_form":"Python","offset":6354},{"uri":"Ruby_(programming_language)","surface_form":"Ruby","offset":6362},{"uri":"Javascript","surface_form":"Javascript","offset":6368},{"uri":"ActionScript","surface_form":"ActionScript","offset":6384}]}