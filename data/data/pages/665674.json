{"id":665674,"url":"http://en.wikipedia.org/wiki/Binary_search","text":"In computer science, binary search is a method used for finding an item in a sorted list. It is an algorithm that is more efficient than linear search, which will go through every item in the list of items to find a particular item. However, the given list of items must be sorted first before a binary search algorithm can be used.\nThe binary search algorithm works by repeatedly splitting the sorted list into two and working on the part of the list that may contain the item that you are looking for until the final list contains only one item.\nAlgorithm.\nFirst, the algorithm must be given a sorted list and the item to look for, called the target value. The algorithm then compares the middle item of the sorted list with the target value. If the middle item is the same as the target value, then the position of that middle item in the sorted list is returned by the algorithm. If the middle item is larger than the target value, then the algorithm will repeat the previous step, but this time only working on the lower half of the sorted list (where all the items are smaller than the middle item). The same is done if the middle item is smaller than the target value, but the algorithm will repeat the previous step on the upper half of the sorted list (where all the items are larger than the middle item).\nformula_1\nAs the algorithm will divide the sorted list into two parts, each iteration thus makes the size of the search smaller by half, which makes it very efficient when searching in a large list of items.\nThe following is a table showing each step of the binary search algorithm. The middle item in the sorted list is in bold.\nIn this case, position 7 is returned by the algorithm after 3 steps. If the item is not inside the sorted list of items, the binary search algorithm will keep trying until the position of the smallest item is larger than the position of the biggest item before it will return as an unsuccessful search.\nImplementation.\nThe implementation of this algorithm requires using a while loop, which will check if the position of the smallest item is larger than the position of the biggest item. Inside the loop, the algorithm will then check if the middle item is equal to, smaller than or bigger than the target value.\nA possible way of writing this algorithm in Java is shown below.\npublic static int binarySearch(int[] array, int target)","categories":[],"infobox_types":[],"annotations":[{"uri":"Computer_science","surface_form":"computer science","offset":3},{"uri":"Algorithm","surface_form":"algorithm","offset":99},{"uri":"Linear_search","surface_form":"linear search","offset":137},{"uri":"Return_statement","surface_form":"returned by the algorithm","offset":857},{"uri":"While_loop","surface_form":"while loop","offset":2019},{"uri":"Java_(programming_language)","surface_form":"Java","offset":2303}]}