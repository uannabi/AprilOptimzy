{"id":676491,"url":"http://en.wikipedia.org/wiki/Memoization","text":"e=\"preserve\">Memoization (or memoisation) is a technique from computer programming to optimize a computer program. Computer programs call functions. Each function calculates a result it will return. Memoization is simple: before the value is returned from the function call, it is stored in a table (or associative array). Like a cache, this array will only be able to store a limited number f results. The function can then be changed so it tries to look up the value of the input in its lookup table. This lookup is much less expensive than doing the calculation again. Also like a cache: the data table will be cleaned periodically, for examples the values that have not been lookued up for a given time are removed.\nAlthough related to caching, memoization refers to a specific case of this optimization, distinguishing it from forms of caching such as buffering or page replacement. In the context of some logic programming languages, memoization is also known as tabling; see also lookup table.","categories":[],"infobox_types":[],"annotations":[{"uri":"Optimization_(computer_science)","surface_form":"optimize","offset":86},{"uri":"Cache","surface_form":"cache","offset":330},{"uri":"Lookup_table","surface_form":"lookup table","offset":489},{"uri":"Cache","surface_form":"caching","offset":740},{"uri":"Buffer_(computer_science)","surface_form":"buffering","offset":857},{"uri":"Page_replacement_algorithm","surface_form":"page replacement","offset":870},{"uri":"Logic_programming","surface_form":"logic programming","offset":911},{"uri":"Lookup_table","surface_form":"lookup table","offset":987}]}