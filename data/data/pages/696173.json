{"id":696173,"url":"http://en.wikipedia.org/wiki/Referential_transparency","text":"e=\"preserve\">Referential transparency is a feature of parts of computer programs. A part of a program is called \"referentially transparent\" if it can be replaced with the value it gives back without changing the program's behavior. A referentially transparent function must be pure\u2014it must always give the same output if it takes the same input, and it must not have any side effects\u2014parts of the program that perform an action other than giving a value back. The opposite of referential transparency is referential opacity.\nIn mathematics, all functions are referentially transparent, because a mathematical function can only take values in and spit a value out. In programming, this is not always true\u2014a function might also find out what day of the year it is, or print a message to the screen. Because of this difference, some people use other names for functions in programming, like procedures.\nThere are several ways of doing the last task\u2014the most well-known are memoization (saving answers after the first time), common subexpression elimination (figuring out if it is worth it to combine two parts of the code that are the same), lazy evaluation (not finding the answer until the code really needs it), and parallelization (working on multiple problems at the same time).","categories":[],"infobox_types":[],"annotations":[{"uri":"Computer_program","surface_form":"computer programs","offset":63},{"uri":"Pure_function","surface_form":"pure","offset":277},{"uri":"Side_effect_(computer_science)","surface_form":"side effects","offset":371},{"uri":"Mathematics","surface_form":"mathematics","offset":528},{"uri":"Function_(mathematics)","surface_form":"mathematical function","offset":596},{"uri":"Computer_programming","surface_form":"programming","offset":667},{"uri":"Computer_monitor","surface_form":"screen","offset":789},{"uri":"Procedural_programming","surface_form":"procedures","offset":888},{"uri":"Memoization","surface_form":"memoization","offset":970},{"uri":"Common_subexpression_elimination","surface_form":"common subexpression elimination","offset":1021},{"uri":"Lazy_evaluation","surface_form":"lazy evaluation","offset":1139},{"uri":"Parallel_computing","surface_form":"parallelization","offset":1216}]}