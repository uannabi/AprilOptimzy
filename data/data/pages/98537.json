{"id":98537,"url":"http://en.wikipedia.org/wiki/Hexadecimal","text":"e=\"preserve\">The hexadecimal numeral system, often shortened to \"hex\", is a numeral system made up of 16 symbols (base 16). The standard numeral system is called decimal (base 10) and uses ten symbols: 0,1,2,3,4,5,6,7,8,9. Hexadecimal uses the decimal numbers and six extra symbols. There are no numerical symbols that represent values greater than nine, so letters taken from the English alphabet are used, specifically A, B, C, D, E and F. Hexadecimal A = decimal 10, and hexadecimal F = decimal 15.\nHumans mostly use the decimal system. This is probably because humans have ten fingers on their hands. Computers however, only have on and off, called a binary digit (or bit, for short). A binary number is just a string of zeros and ones: 11011011, for example. For convenience, engineers working with computers tend to group bits together. In earlier days, such as the 1960s, they would group 3 bits at a time (much like large decimal numbers are grouped in threes, like the number 123,456,789). Three bits, each being on or off, can represent the eight numbers from 0 to 7: 000 = 0; 001 = 1; 010 = 2; 011 = 3; 100 = 4; 101 = 5; 110 = 6 and 111 = 7. This is called octal.\nAs computers got bigger, it was more convenient to group bits by four instead of three. This doubles the numbers that the symbol would represent; it can have 16 values instead of eight. \"Hex\" = 6 and \"Decimal\" = 10, so it is called hexadecimal. In computer jargon four bits make a \"nibble\" (sometimes spelled \"nybble\"). A nibble is one hexadecimal digit, written using a symbol 0-9 or A-F. Two nibbles make a byte (8 bits). Most computer operations use the byte, or a multiple of the byte (16 bits, 24, 32, 64, etc.). Hexadecimal makes it easier to write these large binary numbers.\nTo avoid confusion with decimal, octal or other numbering systems, hexadecimal numbers are sometimes written with a \"h\" after or \"0x\" before the number. For example, 63h and 0x63 mean 63 hexadecimal.\nHexadecimal values.\nHexadecimal is similar to the octal numeral system (base 8) because each can be easily compared to the binary numeral system. Hexadecimal uses a four-bit binary coding. This means that each digit in hexadecimal is the same as four digits in binary. Octal uses a three-bit binary system.\nIn the decimal system, the first digit is the \"one's\" place, the next digit to the left is the \"ten's\" place, the next is the \"hundred's\" place, etc. In hexadecimal, each digit can be 16 values, not 10. This means the digits have the \"one's\" place, the \"sixteen's\" place, and the next one is the \"256's\" place. So 1h = 1 decimal, 10h = 16 decimal, and 100h = 256 in decimal.\nExample values of hexadecimal numbers converted into binary, octal and decimal.\nBinary to hexadecimal.\nChanging a number from binary to hex uses a grouping method. The binary number is separated into groups of four digits starting from the right. These groups are then converted to hexadecimal digits as shown in the chart above for the hexadecimal numbers 0 through F. To change from hexadecimal, the reverse is done. The hex digits are each changed to binary and the grouping is usually removed.\nHexadecimal to decimal.\nTo convert a number from hexadecimal to decimal, there are two common ways.\nThe next method is more commonly done when converting a number in software. It does not need to know how many digits the number has before it starts, and it never multiplies by more than 16, but it looks longer on paper.\nExample: 5Fh and 3425h to decimal, method 1\nExample: 5Fh and 3425h to decimal, method 2","categories":[],"infobox_types":[],"annotations":[{"uri":"Numeral_system","surface_form":"numeral system","offset":76},{"uri":"Base_(mathematics)","surface_form":"base","offset":114},{"uri":"Decimal_numeral_system","surface_form":"decimal","offset":162},{"uri":"Roman_alphabet","surface_form":"English alphabet","offset":381},{"uri":"Octal_numeral_system","surface_form":"octal","offset":1168},{"uri":"Computer_jargon","surface_form":"computer jargon","offset":1423},{"uri":"Byte","surface_form":"byte","offset":1584},{"uri":"Octal","surface_form":"octal","offset":2008},{"uri":"Binary_numeral_system","surface_form":"binary numeral system","offset":2081},{"uri":"Bit","surface_form":"bit","offset":2128},{"uri":"Digit","surface_form":"digit","offset":2168},{"uri":"Decimal","surface_form":"decimal","offset":2272}]}